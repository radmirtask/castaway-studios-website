---
import Layout from '../layouts/Layout.astro';
import captainSrc from '../../public/home/hero/Captain_Bootycall.png';
import captainMobileSrc from '../../public/home/hero/Captain_BootycallMobile.png';
import bgSrc from '../../public/home/hero/BG.png';
import ctaSrc from '../../public/home/hero/Business_button.png';
import ctaMobileSrc from '../../public/home/hero/Business_buttonMobile.png';
import game1Src from '../../public/home/games/Elarion.mp4';
import game3Src from '../../public/home/games/Elarion2.mp4';
import game4Src from '../../public/home/games/Elarion3.mp4';
import game5Src from '../../public/home/games/RealmsOfShadowArenaQuestTrailer.mp4';
import arrowSrc from '../../public/home/games/arrow.png';
import rectangleSrc from '../../public/home/games/rectangle below arrow.png';
import arrowsBgSrc from '../../public/home/statsAbout/arrows.jpg';
import stat1Src from '../../public/home/statsAbout/1. Active Projects.png';
import stat2Src from '../../public/home/statsAbout/2. Years Experience.png';
import stat3Src from '../../public/home/statsAbout/3. Team Members.png';
import aboutBgSrc from '../../public/home/who/BG.png';
import './home/home.css'; 
import DevelopmentPath from '../components/DevelopmentPath/DevelopmentPath.jsx';
import GameCarousel from '../components/Carusel/GameCarousel.jsx';

---

<Layout title="Home — Castaway Studios">
  <main>
    <!-- Hero Section -->
    <section class="hero">
      <div class="hero__bg" style={`background-image: url(${bgSrc.src});`}></div>
      <div class="hero__content">
        <div class="hero__text">
          <h1 class="hero__headline">CRAFTING FUN, PIRATE STYLE.</h1>
          <a href="/contactUs" class="hero__button-link">
            <picture>
              <source srcset={ctaSrc.src} media="(min-width: 1024px)" />
              <img 
                src={ctaMobileSrc.src} 
                alt="TALK BUSINESS" 
                class="hero__business-button" 
                draggable="false" 
              />
            </picture>
          </a>
          <p class="hero__description">
            Castaway Studios creates original, high-impact mobile games that meet today's players and set new standards for tomorrow.
          </p>
        </div>
        <picture>
          <source srcset={captainMobileSrc.src} media="(max-width: 767px)" />
          <img 
            src={captainSrc.src} 
            alt="Captain Bootycall character" 
            class="hero__pirate-image" 
            draggable="false" 
          />
        </picture>
      </div>
      <div></div>
    </section>
    
    <!-- Game Collection Section -->
    <section class="game-collection">
      <div class="floating-particles" id="particles"></div>
    
    <div class="carousel-container">
        <div class="carousel-header">
            <h1 class="carousel-title">Our Game Collection</h1>
            <p class="carousel-subtitle">We design for mobile from day one — not as a port, not as a second-tier
              platform. Every vibration, interaction, and UI element is crafted with the phone in
              mind. At Castaway Studios, we believe mobile deserves games that feel made
              for your hands — not just adapted to them.</p>
        </div>

        <div class="carousel-wrapper">
            <div class="carousel-track" id="carouselTrack">
                <!-- Game Card 1 -->
                <div class="game-card">
                    <div class="phone-button-2"></div>
                    <div class="card-video-container">
                        <video class="card-video" muted loop autoplay playsinline>
                            <source src={game1Src} type="video/mp4">
                        </video>
                        <div class="video-overlay">
                        <h3 class="card-title">ELARION</h3>
                        <p class="card-description">Step into a magical world where you're discovering locations and fighting all the different creatures of this world</p>
                        <div class="card-tags">
                            <span class="tag">Open World</span>
                            <span class="tag">Adventure</span>
                            <span class="tag">RPG</span>
                        </div>
                            <a href="/games#elarion" class="card-button">PLAY NOW</a>
                        </div>
                    </div>
                </div>

                <!-- Game Card 2 -->
                <div class="game-card">
                  <div class="phone-button-2"></div>
                  <div class="card-video-container">
                      <video class="card-video" muted loop autoplay playsinline>
                          <source src={game5Src} type="video/mp4">
                      </video>
                      <div class="video-overlay">
                        <h3 class="card-title">ARENA QUEST</h3>
                          <p class="card-description">Defeat Enemies, Endless Action</p>
                        <div class="card-tags">
                            <span class="tag">RPG</span>
                            <span class="tag">Adventure</span>
                            <span class="tag">Exploration</span>
                        </div>
                          <a href="/games#arenaquest" class="card-button">PLAY NOW</a>
                      </div>
                  </div>
              </div>

                <!-- Game Card 3 -->
                <div class="game-card">
                  <div class="phone-button-2"></div>
                  <div class="card-video-container">
                      <video class="card-video" muted loop autoplay playsinline>
                        <source src="https://via.placeholder.com/400x600/7c2d12/ffffff.mp4" type="video/mp4">
                      </video>
                      <div class="video-overlay">
                          <h3 class="card-title">PUPPY COLLECTOR</h3>
                          <p class="card-description">Collect Cute Puppies and relax</p>
                    <div class="card-tags">
                        <span class="tag">Casual</span>
                        <span class="tag">Puzzle</span>
                        <span class="tag">Relaxing</span>
                    </div>
                          <a href="/games#puppycollector" class="card-button">PLAY NOW</a>
                      </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="carousel-controls">
            <button class="control-button" id="prevBtn">‹</button>
            <button class="control-button" id="nextBtn">›</button>
        </div>

        <div class="carousel-indicators" id="indicators"></div>
    </div>
    <script>
      class GameCarousel {
          constructor() {
              this.track = document.getElementById('carouselTrack');
              this.cards = document.querySelectorAll('.game-card');
              this.prevBtn = document.getElementById('prevBtn');
              this.nextBtn = document.getElementById('nextBtn');
              this.indicators = document.getElementById('indicators');
              
              this.currentIndex = 0;
              this.cardsPerView = this.getCardsPerView();
              this.totalCards = this.cards.length;
              this.maxIndex = this.getMaxIndex();
              
              this.init();
          }

          init() {
              this.createIndicators();
              this.updateCarousel();
              this.bindEvents();
              this.createFloatingParticles();
              this.autoPlayVideos();
              this.setupVideoHandlers();
              this.setupVideoIntersectionObserver();
              
              // Responsive handling
              window.addEventListener('resize', () => {
                  this.cardsPerView = this.getCardsPerView();
                  this.maxIndex = this.getMaxIndex();
                  this.currentIndex = Math.min(this.currentIndex, this.maxIndex);
                  this.updateCarousel();
              });
          }

          getCardsPerView() {
              if (window.innerWidth <= 768) return 1;
              if (window.innerWidth <= 1024) return 2;
              return 3;
          }
          
          getMaxIndex() {
              // Always use the same logic: allow navigation to each individual card
              return this.totalCards - 1;
          }

          createIndicators() {
              this.indicators.innerHTML = '';
              // Always create indicators for each card
              for (let i = 0; i < this.totalCards; i++) {
                  const indicator = document.createElement('div');
                  indicator.classList.add('indicator');
                  if (i === 0) indicator.classList.add('active');
                  indicator.addEventListener('click', () => this.goToSlide(i));
                  this.indicators.appendChild(indicator);
              }
          }

          bindEvents() {
              this.prevBtn.addEventListener('click', () => this.prevSlide());
              this.nextBtn.addEventListener('click', () => this.nextSlide());
              
              // Enhanced touch/swipe support
              let startX = 0;
              let startY = 0;
              let isDragging = false;
              let currentX = 0;
              let initialTransform = 0;
              
              const handleTouchStart = (e) => {
                  startX = e.touches[0].clientX;
                  startY = e.touches[0].clientY;
                  isDragging = true;
                  
                  // Get current transform value
                  const transform = this.track.style.transform;
                  const match = transform.match(/translateX\((-?\d+)px\)/);
                  initialTransform = match ? parseInt(match[1]) : 0;
                  
                  this.track.style.transition = 'none';
              };
              
              const handleTouchMove = (e) => {
                  if (!isDragging) return;
                  
                  currentX = e.touches[0].clientX;
                  const currentY = e.touches[0].clientY;
                  
                  const diffX = currentX - startX;
                  const diffY = currentY - startY;
                  const absDiffX = Math.abs(diffX);
                  const absDiffY = Math.abs(diffY);
                  
                  // Simple direction detection
                  if (absDiffX > absDiffY && absDiffX > 10) {
                      // Horizontal swipe - prevent page scroll and show live preview
                  e.preventDefault();
                      const newTransform = initialTransform + diffX;
                      this.track.style.transform = `translateX(${newTransform}px)`;
                  } else if (absDiffY > 10) {
                      // Vertical scroll - stop carousel interaction
                      isDragging = false;
                      this.track.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                      this.updateCarousel();
                  }
              };
              
              const handleTouchEnd = (e) => {
                  if (!isDragging) return;
                  isDragging = false;
                  
                  // Re-enable transition
                  this.track.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                  
                  const endX = e.changedTouches[0].clientX;
                  const diffX = startX - endX;
                  const absDiffX = Math.abs(diffX);
                  
                  // Simple swipe detection - if significant horizontal movement, change slide
                  const threshold = 50; // Simple fixed threshold
                  
                  if (absDiffX > threshold) {
                      if (diffX > 0 && this.currentIndex < this.maxIndex) {
                          this.nextSlide();
                      } else if (diffX < 0 && this.currentIndex > 0) {
                          this.prevSlide();
                      } else {
                          // At bounds, just snap back to current position
                          this.updateCarousel();
                      }
                  } else {
                      // Small movement, stay at current position
                      this.updateCarousel();
                  }
              };
              
              // Attach touch events
              this.track.addEventListener('touchstart', handleTouchStart, { passive: true });
              this.track.addEventListener('touchmove', handleTouchMove, { passive: false });
              this.track.addEventListener('touchend', handleTouchEnd, { passive: true });
              
              // Mouse drag support for desktop
              let isMouseDown = false;
              
              this.track.addEventListener('mousedown', (e) => {
                  isMouseDown = true;
                  startX = e.clientX;
                  const transform = this.track.style.transform;
                  const match = transform.match(/translateX\((-?\d+)px\)/);
                  initialTransform = match ? parseInt(match[1]) : 0;
                  this.track.style.transition = 'none';
                  this.track.style.cursor = 'grabbing';
              });
              
              this.track.addEventListener('mousemove', (e) => {
                  if (!isMouseDown) return;
                  e.preventDefault();
                  
                  const diffX = e.clientX - startX;
                  const newTransform = initialTransform + diffX;
                  this.track.style.transform = `translateX(${newTransform}px)`;
              });
              
              const handleMouseUp = (e) => {
                  if (!isMouseDown) return;
                  isMouseDown = false;
                  
                  this.track.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                  this.track.style.cursor = 'grab';
                  
                  const diff = startX - e.clientX;
                  const threshold = 50;
                  
                  if (Math.abs(diff) > threshold) {
                      if (diff > 0) {
                          this.nextSlide();
                      } else {
                          this.prevSlide();
                      }
                  } else {
                      this.updateCarousel();
                  }
              };
              
              document.addEventListener('mouseup', handleMouseUp);
              document.addEventListener('mouseleave', handleMouseUp);

              // Keyboard navigation
              document.addEventListener('keydown', (e) => {
                  if (e.key === 'ArrowLeft') this.prevSlide();
                  if (e.key === 'ArrowRight') this.nextSlide();
              });
          }

          prevSlide() {
              if (this.currentIndex > 0) {
                  this.currentIndex--;
                  this.updateCarousel();
              }
          }

          nextSlide() {
              if (this.currentIndex < this.maxIndex) {
                  this.currentIndex++;
                  this.updateCarousel();
              }
          }

          goToSlide(index) {
              this.currentIndex = Math.max(0, Math.min(index, this.maxIndex));
              this.updateCarousel();
          }

          updateCarousel() {
              if (this.cards.length === 0) return;
              
              const isMobile = window.innerWidth <= 768;
              const isTablet = window.innerWidth > 768 && window.innerWidth <= 1024;
              const isDesktop = window.innerWidth > 1024;
              const gap = isMobile ? 15 : 40;
              const trackPadding = 20;
              
              // Calculate perfect centering
              const wrapperWidth = this.track.parentElement.offsetWidth;
              const wrapperCenter = wrapperWidth / 2;
              
              // Get the actual card dimensions including margins
              const cardElement = this.cards[0];
              const cardWidth = cardElement.offsetWidth;
              const cardStyle = window.getComputedStyle(cardElement);
              const marginLeft = parseFloat(cardStyle.marginLeft) || 0;
              const marginRight = parseFloat(cardStyle.marginRight) || 0;
              
              let offset;
              
              if (isDesktop) {
                  // Desktop: Show multiple cards, center the view around current selection
                  const cardsPerView = 3; // Desktop shows ~3 cards at once
                  const totalCardSpace = cardWidth + gap;
                  
                  // Calculate offset to show cards naturally centered
                  if (this.currentIndex === 0) {
                      // First card: align to start with minimal padding
                      offset = trackPadding;
                  } else if (this.currentIndex >= this.totalCards - cardsPerView) {
                      // Last cards: align to end
                      const maxOffset = -(this.totalCards - cardsPerView) * totalCardSpace;
                      offset = maxOffset + trackPadding;
                  } else {
                      // Middle cards: center the current card
                      const cardPosition = this.currentIndex * totalCardSpace;
                      const centerPosition = Math.floor(cardsPerView / 2) * totalCardSpace;
                      offset = trackPadding + centerPosition - cardPosition;
                  }
              } else {
                  // Mobile/Tablet: Single card centering
                  const totalCardSpace = cardWidth + marginLeft + marginRight + gap;
                  const cardCenter = cardWidth / 2;
                  const cardPosition = trackPadding + marginLeft + (this.currentIndex * totalCardSpace);
                  offset = wrapperCenter - cardCenter - cardPosition;
              }
              
              this.track.style.transform = `translateX(${offset}px)`;
              
              // Update buttons
              this.prevBtn.disabled = this.currentIndex === 0;
              this.nextBtn.disabled = this.currentIndex === this.maxIndex;
              
              // Update indicators
              document.querySelectorAll('.indicator').forEach((indicator, index) => {
                  indicator.classList.toggle('active', index === this.currentIndex);
              });
          }

          autoPlayVideos() {
              this.cards.forEach(card => {
                  const video = card.querySelector('.card-video');
                  if (video) {
                      // Set video properties for better mobile support
                      video.setAttribute('playsinline', 'true');
                      video.setAttribute('webkit-playsinline', 'true');
                      video.muted = true;
                      
                      // Try to play immediately
                      const tryPlay = () => {
                          video.play().catch(() => {
                              // Fallback for browsers that don't allow autoplay
                              console.log('Autoplay prevented, will try on user interaction');
                          });
                      };
                      
                      // Try on different events
                      video.addEventListener('loadeddata', tryPlay);
                      video.addEventListener('canplay', tryPlay);
                      
                      // For mobile devices, also try on touchstart
                      if ('ontouchstart' in window) {
                          document.addEventListener('touchstart', () => {
                              tryPlay();
                          }, { once: true });
                      }
                  }
              });
          }

          createFloatingParticles() {
              const particlesContainer = document.getElementById('particles');
              if (!particlesContainer) return;
              
              const particleCount = 20;
              
              for (let i = 0; i < particleCount; i++) {
                  const particle = document.createElement('div');
                  particle.classList.add('particle');
                  
                  // Random size and position
                  const size = Math.random() * 6 + 2;
                  particle.style.width = `${size}px`;
                  particle.style.height = `${size}px`;
                  particle.style.left = `${Math.random() * 100}%`;
                  particle.style.top = `${Math.random() * 100}%`;
                  particle.style.animationDelay = `${Math.random() * 6}s`;
                  particle.style.animationDuration = `${6 + Math.random() * 4}s`;
                  
                  particlesContainer.appendChild(particle);
              }
          }

          setupVideoHandlers() {
                    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

                    document.querySelectorAll('.card-video-container').forEach(container => {
                        const video = container.querySelector('.card-video');
                        if (!video) return;

                        container.style.cursor = 'pointer';

                        // Mobile: kick off inline play on touchstart (no modal)
                        if (isMobile) {
                            container.addEventListener('touchstart', () => {
                                video.play().catch(() => {
                                    console.log('Mobile video play failed');
                                });
                            }, { passive: true });
                        }

                        // Desktop & tap: open modal on click
                        container.addEventListener('click', () => {
                            this.openVideoModal(video);
                        });

                        // Mobile: only open modal on a true "tap" (minimal movement)
                        if (isMobile) {
                            let startX = 0, startY = 0;
                            const TAP_THRESHOLD = 10; // px

                            container.addEventListener('touchstart', e => {
                                startX = e.touches[0].clientX;
                                startY = e.touches[0].clientY;
                            }, { passive: true });

                            container.addEventListener('touchend', e => {
                                const endX = e.changedTouches[0].clientX;
                                const endY = e.changedTouches[0].clientY;
                                const dx = Math.abs(endX - startX);
                                const dy = Math.abs(endY - startY);

                                if (dx < TAP_THRESHOLD && dy < TAP_THRESHOLD) {
                                    this.openVideoModal(video);
                                }
                                // no preventDefault(), so scrolling remains smooth
                            }, { passive: true });
                        }
                    });
                }

          openVideoFullscreen(video) {
              if (video.requestFullscreen) {
                  video.requestFullscreen();
              } else if (video.webkitRequestFullscreen) {
                  video.webkitRequestFullscreen();
              } else if (video.msRequestFullscreen) {
                  video.msRequestFullscreen();
              }
              video.play();
          }

          openVideoModal(video) {
              const modal = document.createElement('div');
              modal.className = 'video-modal';
              
              const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
              
              modal.innerHTML = `
                  <div class="video-modal-overlay">
                      <div class="video-modal-content">
                          <button class="video-modal-close">&times;</button>
                          <div class="video-modal-phone-screen">
                              <div class="video-modal-status-bar">
                                  <div class="video-modal-time">${currentTime}</div>
                                  <div class="video-modal-battery">
                                      <div class="video-modal-signal"></div>
                                      <div class="video-modal-battery-icon">
                                          <div class="video-modal-battery-level"></div>
                                      </div>
                                  </div>
                              </div>
                              <video class="video-modal-player" autoplay muted loop>
                              <source src="${video.querySelector('source').src}" type="video/mp4">
                          </video>
                              <div class="video-modal-controls">
                                  <button class="video-modal-play-btn">▶</button>
                                  <button class="video-modal-sound-btn">🔊</button>
                                  <div class="video-modal-progress">
                                      <div class="video-modal-progress-bar"></div>
                                  </div>
                                  <div class="video-modal-time-display">0:00 / 0:00</div>
                              </div>
                          </div>
                      </div>
                  </div>
              `;
              
              document.body.appendChild(modal);
              document.body.style.overflow = 'hidden';
              
              const modalVideo = modal.querySelector('.video-modal-player');
              const playBtn = modal.querySelector('.video-modal-play-btn');
              const soundBtn = modal.querySelector('.video-modal-sound-btn');
              const progressBar = modal.querySelector('.video-modal-progress-bar');
              const timeDisplay = modal.querySelector('.video-modal-time-display');
              
              // Video controls
              let isPlaying = true;
              let isMuted = true; // Start muted as videos autoplay muted
              
              playBtn.addEventListener('click', () => {
                  if (isPlaying) {
                      modalVideo.pause();
                      playBtn.textContent = '▶';
                      isPlaying = false;
                  } else {
                      modalVideo.play();
                      playBtn.textContent = '⏸';
                      isPlaying = true;
                  }
              });
              
              soundBtn.addEventListener('click', () => {
                  if (isMuted) {
                      modalVideo.muted = false;
                      soundBtn.textContent = '🔊';
                      soundBtn.classList.remove('muted');
                      isMuted = false;
                  } else {
                      modalVideo.muted = true;
                      soundBtn.textContent = '🔇';
                      soundBtn.classList.add('muted');
                      isMuted = true;
                  }
              });
              
              // Progress tracking
              modalVideo.addEventListener('timeupdate', () => {
                  const progress = (modalVideo.currentTime / modalVideo.duration) * 100;
                  progressBar.style.width = `${progress}%`;
                  
                  const currentMin = Math.floor(modalVideo.currentTime / 60);
                  const currentSec = Math.floor(modalVideo.currentTime % 60);
                  const durationMin = Math.floor(modalVideo.duration / 60);
                  const durationSec = Math.floor(modalVideo.duration % 60);
                  
                  timeDisplay.textContent = `${currentMin}:${currentSec.toString().padStart(2, '0')} / ${durationMin}:${durationSec.toString().padStart(2, '0')}`;
              });
              
              modalVideo.addEventListener('play', () => {
                  playBtn.textContent = '⏸';
                  isPlaying = true;
              });
              
              modalVideo.addEventListener('pause', () => {
                  playBtn.textContent = '▶';
                  isPlaying = false;
              });
              
              const closeModal = () => {
                  modalVideo.pause();
                  document.body.removeChild(modal);
                  document.body.style.overflow = '';
              };
              
              modal.querySelector('.video-modal-close').addEventListener('click', closeModal);
              modal.querySelector('.video-modal-overlay').addEventListener('click', (e) => {
                  if (e.target === e.currentTarget) closeModal();
              });
              
              document.addEventListener('keydown', function escapeHandler(e) {
                  if (e.key === 'Escape') {
                      closeModal();
                      document.removeEventListener('keydown', escapeHandler);
                  }
                  if (e.key === ' ') {
                      e.preventDefault();
                      playBtn.click();
                  }
              });
          }

          setupVideoIntersectionObserver() {
              const options = {
                  root: null,
                  rootMargin: '0px',
                  threshold: 0.5
              };

              const observer = new IntersectionObserver((entries) => {
                  entries.forEach(entry => {
                      const video = entry.target.querySelector('.card-video');
                      if (video) {
                          if (entry.isIntersecting) {
                              video.play().catch(() => {
                                  console.log('Intersection video play failed');
                              });
                          } else {
                              video.pause();
                          }
                      }
                  });
              }, options);

              this.cards.forEach(card => {
                  observer.observe(card);
              });
          }

          
      }

      // Initialize carousel when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
          new GameCarousel();
      });

      // Enhanced hover effects
      document.querySelectorAll('.game-card').forEach(card => {
          card.addEventListener('mouseenter', () => {
              const video = card.querySelector('.card-video');
              if (video) {
                  video.play().catch(() => {});
              }
          });

          card.addEventListener('mouseleave', () => {
              const video = card.querySelector('.card-video');
              if (video) {
                  video.pause();
              }
          });
      });

      // Stats section hover effects (matching aboutUs implementation)
      // Check if device has touch capability
      const isTouchDevice = ('ontouchstart' in window) || 
                           (navigator.maxTouchPoints > 0);
      
      // Only add mouse interactions for non-touch devices
      if (!isTouchDevice) {
        const statItems = document.querySelectorAll('.stat-item');
        
        statItems.forEach(item => {
          item.addEventListener('mouseenter', function() {
            this.style.transition = 'transform 0.1s ease-out, background 0.4s ease, backdrop-filter 0.4s ease, border 0.4s ease, box-shadow 0.4s ease';
          });
          
          item.addEventListener('mouseleave', function() {
            this.style.transition = 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            this.style.transform = 'translateY(0) scale(1) rotateX(0deg) rotateY(0deg)';
          });
          
          item.addEventListener('mousemove', function(e) {
            const element = this;
            const rect = element.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            
            const rotateX = (y - centerY) / centerY * -12;
            const rotateY = (x - centerX) / centerX * 12;
            
            element.style.transform = `translateY(-8px) scale(1.02) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
          });
        });
      }

      document.querySelectorAll('.card-button').forEach(btn => {
        btn.addEventListener('click', e => {
          e.stopPropagation();
        });
      });
  </script>
    </section>
    
    <!-- Stats Section -->
    <section class="stats-section" aria-label="Company Stats">
      <div class="stats-bg"></div>
      <div class="stats-container">
        <div class="stats-grid">
          <div class="stat-item">
            <div class="stat-number">3+</div>
            <div class="stat-label">Games<br>in Development</div>
            </div>
          <div class="stat-item">
            <div class="stat-number">5</div>
            <div class="stat-label">Team<br>Members</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">3</div>
            <div class="stat-label">Years<br>Experience</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">2</div>
            <div class="stat-label">Games<br>in Apple Store</div>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Who Are We Section -->
    <section class="about">
      <img 
        src={aboutBgSrc.src} 
        alt="Pirate ship sailing" 
        class="about__bg-image" 
        draggable="false"
      />
      <div class="about__content-wrapper">
        <div class="about__content">
          <h2 class="about__title">WHO ARE WE?</h2>
          <div class="about__text">
            <p>Castaway Studios is a global joint stock mobile game studio rooted in Turkey,
              with a creative hub in Canada. We create mobile-first games with depth, style,
              and purpose.
              Built on trust and creativity, our team delivers intuitive controls, bold worlds, and
              scalable systems — with a focus on data, live feedback, and long-term growth.</p>
            <p class="about__highlight">We don't just make games—we throw a party on every screen.</p>
          </div>
        </div>
    </div>
    </section>
    
    <DevelopmentPath client:load />
    
    <!-- Ready to Create Section -->
    <section class="cta">
      <h2 class="section-title">Ready to Build What's Next?</h2>
      <a href="/contactUs" class="cta-button">Get in Touch</a>
    </section>
  </main>
</Layout>